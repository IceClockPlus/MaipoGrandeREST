//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatoMaipo
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class DBEntities : DbContext
    {
        public DBEntities()
            : base("name=DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<PAIS> PAIS { get; set; }
        public DbSet<ROL> ROL { get; set; }
        public DbSet<USUARIO> USUARIO { get; set; }
        public DbSet<CLIENTE> CLIENTE { get; set; }
        public DbSet<ESTADOPEDIDO> ESTADOPEDIDO { get; set; }
        public DbSet<PEDIDO> PEDIDO { get; set; }
        public DbSet<DETALLEPEDIDO> DETALLEPEDIDO { get; set; }
        public DbSet<PRODUCTO> PRODUCTO { get; set; }
        public DbSet<CONTRATO> CONTRATO { get; set; }
        public DbSet<PRODUCTOR> PRODUCTOR { get; set; }
        public DbSet<OFERTAPRODUCTO> OFERTAPRODUCTO { get; set; }
        public DbSet<SUBASTA> SUBASTA { get; set; }
        public DbSet<ESTADOSUBASTA> ESTADOSUBASTA { get; set; }
        public DbSet<OFERTASUBASTA> OFERTASUBASTA { get; set; }
        public DbSet<TIPOTRANSPORTE> TIPOTRANSPORTE { get; set; }
        public DbSet<TRANSPORTISTA> TRANSPORTISTA { get; set; }
        public DbSet<PRODUCCION> PRODUCCION { get; set; }
    
        public virtual int SP_INSERT_PRODUCTO(string nOMBREPRODUCTO, Nullable<decimal> pRECIOESTIMADO, string iMAGENPRODUCTO, string bANNERPRODUCTO)
        {
            var nOMBREPRODUCTOParameter = nOMBREPRODUCTO != null ?
                new ObjectParameter("NOMBREPRODUCTO", nOMBREPRODUCTO) :
                new ObjectParameter("NOMBREPRODUCTO", typeof(string));
    
            var pRECIOESTIMADOParameter = pRECIOESTIMADO.HasValue ?
                new ObjectParameter("PRECIOESTIMADO", pRECIOESTIMADO) :
                new ObjectParameter("PRECIOESTIMADO", typeof(decimal));
    
            var iMAGENPRODUCTOParameter = iMAGENPRODUCTO != null ?
                new ObjectParameter("IMAGENPRODUCTO", iMAGENPRODUCTO) :
                new ObjectParameter("IMAGENPRODUCTO", typeof(string));
    
            var bANNERPRODUCTOParameter = bANNERPRODUCTO != null ?
                new ObjectParameter("BANNERPRODUCTO", bANNERPRODUCTO) :
                new ObjectParameter("BANNERPRODUCTO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_INSERT_PRODUCTO", nOMBREPRODUCTOParameter, pRECIOESTIMADOParameter, iMAGENPRODUCTOParameter, bANNERPRODUCTOParameter);
        }
    
        public virtual int SP_INSERT_PEDIDO(Nullable<System.DateTime> fECHAPEDIDO, Nullable<System.DateTime> fECHAENTREGA, string dIRECCIONPEDIDO, Nullable<decimal> iDCLIENTE, Nullable<decimal> iDESTADOPEDIDO, string cIUDAD, ObjectParameter rESULTADO)
        {
            var fECHAPEDIDOParameter = fECHAPEDIDO.HasValue ?
                new ObjectParameter("FECHAPEDIDO", fECHAPEDIDO) :
                new ObjectParameter("FECHAPEDIDO", typeof(System.DateTime));
    
            var fECHAENTREGAParameter = fECHAENTREGA.HasValue ?
                new ObjectParameter("FECHAENTREGA", fECHAENTREGA) :
                new ObjectParameter("FECHAENTREGA", typeof(System.DateTime));
    
            var dIRECCIONPEDIDOParameter = dIRECCIONPEDIDO != null ?
                new ObjectParameter("DIRECCIONPEDIDO", dIRECCIONPEDIDO) :
                new ObjectParameter("DIRECCIONPEDIDO", typeof(string));
    
            var iDCLIENTEParameter = iDCLIENTE.HasValue ?
                new ObjectParameter("IDCLIENTE", iDCLIENTE) :
                new ObjectParameter("IDCLIENTE", typeof(decimal));
    
            var iDESTADOPEDIDOParameter = iDESTADOPEDIDO.HasValue ?
                new ObjectParameter("IDESTADOPEDIDO", iDESTADOPEDIDO) :
                new ObjectParameter("IDESTADOPEDIDO", typeof(decimal));
    
            var cIUDADParameter = cIUDAD != null ?
                new ObjectParameter("CIUDAD", cIUDAD) :
                new ObjectParameter("CIUDAD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_INSERT_PEDIDO", fECHAPEDIDOParameter, fECHAENTREGAParameter, dIRECCIONPEDIDOParameter, iDCLIENTEParameter, iDESTADOPEDIDOParameter, cIUDADParameter, rESULTADO);
        }
    }
}
